/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
Command: npx gltfjsx@6.5.3 public/models/arbre.glb --transform --types --shadows 
Files: public/models/arbre.glb [22.73MB] > C:\Users\tibog\Documents\VSCODE\r3f-3rd-person-controller-final-main2\arbre-transformed.glb [2.83MB] (88%)
*/

import * as THREE from "three";
import React from "react";
import { useGLTF } from "@react-three/drei";
import { GLTF } from "three-stdlib";

type GLTFResult = GLTF & {
  nodes: {
    ["Tree_Aesculus-hippocastanum_B_summer_1"]: THREE.Mesh;
    ["Tree_Aesculus-hippocastanum_B_summer_2"]: THREE.Mesh;
  };
  materials: {
    ["Bark_Aesculus-hippocastanum_bqm"]: THREE.MeshStandardMaterial;
    ["Leaf_Aesculus-hippocastanum_bqm"]: THREE.MeshStandardMaterial;
  };
  animations: GLTFAction[];
};

export function Model(props: JSX.IntrinsicElements["group"]) {
  const { nodes, materials } = useGLTF(
    "/models/arbre-transformed.glb"
  ) as GLTFResult;

  // Enable transparency for leaf material to avoid blocky/triangular appearance
  React.useEffect(() => {
    materials["Leaf_Aesculus-hippocastanum_bqm"].transparent = true;
    materials["Leaf_Aesculus-hippocastanum_bqm"].alphaTest = 0.5;
    materials["Leaf_Aesculus-hippocastanum_bqm"].side = THREE.DoubleSide;
  }, [materials]);

  return (
    <group {...props} dispose={null}>
      <mesh
        castShadow
        receiveShadow
        geometry={nodes["Tree_Aesculus-hippocastanum_B_summer_1"].geometry}
        material={materials["Bark_Aesculus-hippocastanum_bqm"]}
      />
      <mesh
        castShadow
        receiveShadow
        geometry={nodes["Tree_Aesculus-hippocastanum_B_summer_2"].geometry}
        material={materials["Leaf_Aesculus-hippocastanum_bqm"]}
      />
    </group>
  );
}

useGLTF.preload("/models/arbre-transformed.glb");
